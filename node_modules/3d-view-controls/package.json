{
  "_args": [
    [
      {
        "raw": "3d-view-controls@^2.2.0",
        "scope": null,
        "escapedName": "3d-view-controls",
        "name": "3d-view-controls",
        "rawSpec": "^2.2.0",
        "spec": ">=2.2.0 <3.0.0",
        "type": "range"
      },
      "/home/italove/Projects/ToT/node_modules/gl-plot3d"
    ]
  ],
  "_from": "3d-view-controls@>=2.2.0 <3.0.0",
  "_id": "3d-view-controls@2.2.0",
  "_inCache": true,
  "_location": "/3d-view-controls",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/3d-view-controls-2.2.0.tgz_1487750440395_0.5491890767589211"
  },
  "_npmUser": {
    "name": "dfcreative",
    "email": "df.creative@gmail.com"
  },
  "_npmVersion": "3.7.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "3d-view-controls@^2.2.0",
    "scope": null,
    "escapedName": "3d-view-controls",
    "name": "3d-view-controls",
    "rawSpec": "^2.2.0",
    "spec": ">=2.2.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gl-plot3d"
  ],
  "_resolved": "https://registry.npmjs.org/3d-view-controls/-/3d-view-controls-2.2.0.tgz",
  "_shasum": "44aec9c448c27be34b3dd511ff9202ab6150dca5",
  "_shrinkwrap": null,
  "_spec": "3d-view-controls@^2.2.0",
  "_where": "/home/italove/Projects/ToT/node_modules/gl-plot3d",
  "author": {
    "name": "Mikola Lysenko"
  },
  "bugs": {
    "url": "https://github.com/mikolalysenko/3d-view-controls/issues"
  },
  "dependencies": {
    "3d-view": "^2.0.0",
    "mouse-change": "^1.1.1",
    "mouse-event-offset": "^3.0.2",
    "mouse-wheel": "^1.0.2",
    "right-now": "^1.0.0"
  },
  "description": "A 3D camera with hooks for input handling",
  "devDependencies": {
    "bunny": "^1.0.1",
    "canvas-fit": "^1.2.0",
    "gl-mat4": "^1.1.2",
    "gl-mesh3d": "^1.2.0"
  },
  "directories": {
    "example": "example"
  },
  "dist": {
    "shasum": "44aec9c448c27be34b3dd511ff9202ab6150dca5",
    "tarball": "https://registry.npmjs.org/3d-view-controls/-/3d-view-controls-2.2.0.tgz"
  },
  "gitHead": "d04d428488fb274a1027292115ec0452b4b0486e",
  "homepage": "https://github.com/mikolalysenko/3d-view-controls",
  "keywords": [
    "camera",
    "webgl",
    "3d",
    "input",
    "handling",
    "view",
    "orbit",
    "turntable",
    "matrix",
    "graphics",
    "stackgl",
    "gl"
  ],
  "license": "MIT",
  "main": "camera.js",
  "maintainers": [
    {
      "name": "dfcreative",
      "email": "df.creative@gmail.com"
    },
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    }
  ],
  "name": "3d-view-controls",
  "optionalDependencies": {},
  "readme": "# 3d-view-controls\r\nAn easy to use 3D camera with input binding.\r\n\r\nDefault controls:\r\n\r\nButton | Interaction\r\n-------|------------\r\nLeft mouse | Rotate\r\nShift + left mouse *or* scroll horizontally | Roll\r\nRight mouse | Pan\r\nMiddle mouse *or* scroll vertically | Zoom\r\n\r\n# Example\r\n\r\nHere is a complete working example of how to use this module in an application:\r\n\r\n```javascript\r\nvar createCamera = require('3d-view-controls')\r\nvar bunny = require('bunny')\r\nvar perspective = require('gl-mat4/perspective')\r\nvar createMesh = require('gl-simplicial-complex')\r\n\r\nvar canvas = document.createElement('canvas')\r\ndocument.body.appendChild(canvas)\r\nwindow.addEventListener('resize', require('canvas-fit')(canvas))\r\n\r\nvar gl = canvas.getContext('webgl')\r\n\r\nvar camera = createCamera(canvas, {\r\n  eye:    [50,0,0],\r\n  center: [0,0,0],\r\n  zoomMax: 500\r\n})\r\n\r\nvar mesh = createMesh(gl, {\r\n  cells:      bunny.cells,\r\n  positions:  bunny.positions,\r\n  colormap:   'jet'\r\n})\r\n\r\nfunction render() {\r\n  requestAnimationFrame(render)\r\n  if(camera.tick()) {\r\n    gl.viewport(0, 0, canvas.width, canvas.height)\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n    gl.enable(gl.DEPTH_TEST)\r\n    mesh.draw({\r\n      projection: perspective([], Math.PI/4, canvas.width/canvas.height, 0.01, 1000),\r\n      view: camera.matrix\r\n    })\r\n  }\r\n}\r\nrender()\r\n```\r\n\r\n[You can try it out in your browser right now](https://mikolalysenko.github.io/3d-view-controls).\r\n\r\n# Install\r\n\r\n```\r\nnpm i 3d-view-controls\r\n```\r\n\r\n# API\r\n\r\n## Constructor\r\n\r\n#### `var camera = require('3d-view-controls')(element[, options])`\r\nCreates a new camera object.\r\n\r\n* `element` is a DOM node onto which this\r\n* `options` is an object with the following optional properties:\r\n    + `eye` - the position of the camera in world coordinates (Default `[0,0,10]`)\r\n    + `center` - the target of the camera in world coordinates (Default `[0,0,0]`)\r\n    + `up` - the up vector of the camera (Default `[0,1,0]`)\r\n    + `mode` - the interaction mode for the camera (Default `'orbit'`)\r\n    + `delay` - amount to delay interactions by for interpolation in ms (Default `16`)\r\n    + `rotateSpeed` - rotation scaling factor (Default `1`)\r\n    + `zoomSpeed` - zoom scaling factor (Default `1`)\r\n    + `translateSpeed` - translation/panning scale factor (Default `1`)\r\n    + `flipX` - flip X axis for rotations (Default `false`)\r\n    + `flipY` - flip Y axis for rotations (Default `false`)\r\n    + `zoomMin` - minimum zoom distance (Default `0.01`)\r\n    + `zoomMax` - maximum zoom distance (Default `Infinity`)\r\n\r\n## Geometric properties\r\n\r\nNote that you can update any property by assigning to it.  For example:\r\n\r\n```javascript\r\ncamera.eye = [100, 100, 100]\r\n\r\ncamera.matrix = [\r\n  1, 0, 0, 0,\r\n  0, 1, 0, 0,\r\n  0, 0, 1, 0,\r\n  0, 0, 0, 1]\r\n```\r\n\r\n#### `camera.matrix`\r\nA 4x4 matrix encoded as a length 16 array representing the homogeneous transformation from world coordinates to view (camera) coordinates.\r\n\r\n#### `camera.mode`\r\nThe current interaction mode for the camera.  Possible values include:\r\n\r\n* `orbit` - free orbiting mode\r\n* `turntable` - behaves like a turntable/gimbal\r\n* `matrix` - manual matrix control\r\n\r\n#### `camera.eye`\r\nThe position of the camera in world coordinates\r\n\r\n#### `camera.up`\r\nA vector pointing up in world coordinates\r\n\r\n#### `camera.center`\r\nThe target of the camera in world coordinates\r\n\r\n#### `camera.distance`\r\nEuclidean distance from `eye` to `center`\r\n\r\n## Methods\r\n\r\n#### `camera.tick()`\r\nUpdates the camera state.  Call this before each frame is rendered to compute the current state of the camera.\r\n\r\n**Returns** `true` if the state of the camera has changed since the last call to `tick`\r\n\r\n#### `camera.lookAt(center, eye, up)`\r\nSets the camera center/eye/up vector to look at a fixed target\r\n\r\n* `center` is the new center/target for the camera\r\n* `eye` is the position of the camera in world coordinates\r\n* `up` is a vector pointing up\r\n\r\n#### `camera.rotate(yaw, pitch, roll)`\r\nApplies an incremental rotation to the camera\r\n\r\n* `yaw` is the amount to rotate about the y-axis (in xz plane of camera)\r\n* `pitch` is the amount to rotate about the x-axis (in yz plane of camera)\r\n* `roll` is the amount to rotate about the forward axis (in xy plane of camera)\r\n\r\n#### `camera.pan(dx, dy, dz)`\r\nApplies a relative motion to the camera, moving in view coordinates\r\n\r\n* `dx,dy,dz` are the components of the camera motion vector\r\n\r\n#### `camera.translate(dx, dy, dz)`\r\nTranslates the camera in world coordinates\r\n\r\n* `dx,dy,dz` are the components of the translation vector\r\n\r\n## Tuning parameters\r\n\r\n#### `camera.distanceLimits`\r\nA 2D array representing the `[lo,hi]` bounds on the zoom distance.  Note that `0 < lo < hi`.\r\n\r\n#### `camera.flipX`\r\nA flag controlling whether the camera rotation is flipped along the x-axis\r\n\r\n#### `camera.flipY`\r\nA flag controlling whether the camera rotation is flipped along the y-axis\r\n\r\n#### `camera.delay`\r\nThe amount of delay on the interpolation of the camera state in ms\r\n\r\n#### `camera.rotateSpeed`\r\nCamera rotation speed scaling factor\r\n\r\n#### `camera.zoomSpeed`\r\nCamera zoom speed scaling factor\r\n\r\n#### `camera.translateSpeed`\r\nCamera translation speed scaling factor\r\n\r\n#### `camera.element`\r\nThe DOM element the camera is attached to\r\n\r\n# Future\r\n\r\nExpand to support more input types:\r\n\r\n* Touch\r\n* Keyboard\r\n* GamePad\r\n* VR?\r\n\r\n# License\r\n(c) 2015 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mikolalysenko/3d-view-controls.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.2.0"
}
