{
  "_args": [
    [
      {
        "raw": "filtered-vector@^1.2.1",
        "scope": null,
        "escapedName": "filtered-vector",
        "name": "filtered-vector",
        "rawSpec": "^1.2.1",
        "spec": ">=1.2.1 <2.0.0",
        "type": "range"
      },
      "/home/italove/Projects/ToT/node_modules/orbit-camera-controller"
    ]
  ],
  "_from": "filtered-vector@>=1.2.1 <2.0.0",
  "_id": "filtered-vector@1.2.4",
  "_inCache": true,
  "_location": "/filtered-vector",
  "_nodeVersion": "0.12.2",
  "_npmUser": {
    "name": "mikolalysenko",
    "email": "mikolalysenko@gmail.com"
  },
  "_npmVersion": "2.7.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "filtered-vector@^1.2.1",
    "scope": null,
    "escapedName": "filtered-vector",
    "name": "filtered-vector",
    "rawSpec": "^1.2.1",
    "spec": ">=1.2.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/orbit-camera-controller",
    "/turntable-camera-controller"
  ],
  "_resolved": "https://registry.npmjs.org/filtered-vector/-/filtered-vector-1.2.4.tgz",
  "_shasum": "56453c034df4302d293ca8ecdeac3f90abc678d3",
  "_shrinkwrap": null,
  "_spec": "filtered-vector@^1.2.1",
  "_where": "/home/italove/Projects/ToT/node_modules/orbit-camera-controller",
  "author": {
    "name": "Mikola Lysenko"
  },
  "bugs": {
    "url": "https://github.com/mikolalysenko/filtered-vector/issues"
  },
  "dependencies": {
    "binary-search-bounds": "^1.0.0",
    "cubic-hermite": "^1.0.0"
  },
  "description": "Filter an input vector valued curve",
  "devDependencies": {
    "almost-equal": "0.0.0",
    "array-almost-equal": "^1.0.0",
    "right-now": "^1.0.0",
    "tape": "^3.5.0"
  },
  "directories": {
    "example": "example"
  },
  "dist": {
    "shasum": "56453c034df4302d293ca8ecdeac3f90abc678d3",
    "tarball": "https://registry.npmjs.org/filtered-vector/-/filtered-vector-1.2.4.tgz"
  },
  "gitHead": "d80de2f8c8602491093c1e8f28560f78e54f4c0e",
  "homepage": "https://github.com/mikolalysenko/filtered-vector",
  "keywords": [
    "filter",
    "input",
    "curve",
    "device",
    "mouse"
  ],
  "license": "MIT",
  "main": "fvec.js",
  "maintainers": [
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    }
  ],
  "name": "filtered-vector",
  "optionalDependencies": {},
  "readme": "filtered-vector\n===============\nApplies cubic smoothing to a vector valued curve.  This is useful for smoothing out inputs from the mouse or other input devices.\n\n# Example\n\n```javascript\nvar now = require('right-now')\nvar filterVector = require('filtered-vector')\nvar smoothPosition = filterVector([256, 256])\n\nvar canvas = document.createElement('canvas')\ncanvas.width = 512\ncanvas.height = 512\ndocument.body.appendChild(canvas)\nvar context = canvas.getContext('2d')\n\ncanvas.addEventListener('mousemove', function(ev) {\n  smoothPosition.push(now(), ev.x, ev.y)\n})\n\nfunction paint() {\n  requestAnimationFrame(paint)\n  var t = now()\n  context.fillStyle = 'rgba(0,0,0,1)'\n  context.fillRect(0,0,512,512)\n  \n  context.strokeStyle = '#0f0'\n  context.lineWidth = 1\n  context.beginPath()\n  var x = smoothPosition.curve(t)\n  context.moveTo(x[0], x[1])\n  for(var i=0; i<2000; ++i) {\n    var y = smoothPosition.curve(Math.floor(t - i))\n    context.lineTo(y[0], y[1])\n  }\n  context.stroke()\n}\npaint()\n```\n\n[Try out the demo in your browser.](https://mikolalysenko.github.io/filtered-vector)\n\n# Install\n\n```\nnpm i filtered-vector\n```\n\n# API\n\n## Constructor\n\n#### `var vec = require('filtered-vector')(initState[, initVelocity, initTime])`\nCreates a new smoothed vector with the given initial state, velocity and time.\n\n* `initState` is the initial state of the vector\n* `initVelocity` is the initial velocity of the vector\n* `initTime` is the initial time of the vector\n\n**Returns** A new smoothed vector valued curve\n\n## Methods\n\n#### `vec.curve(t)`\nComputes the value of the curve at time `t`\n\n* `t` is the time parameter to sample the curve\n\n**Returns** The value of the curve at time `t`\n\n#### `vec.dcurve(t)`\nComputes the derivative of the curve at time `t`\n\n* `t` is the time parameter\n\n**Returns** The derivative of the curve at time `t`\n\n#### `vec.bounds`\nA pair of arrays giving the upper and lower bounds on the constraints of the vector.  Default is `[-Infinity,-Infinity, ...]` and `[Infinity,Infinity,...]`\n\n#### `vec.push(t, ...)`\nAdds a new data point onto the end of the curve\n\n* `t` is the time the new data point was sampled\n* `...` are the components of the curve vector\n\n#### `vec.move(t, ...)`\nIncrementally moves the curve from the last sampled position by an offset.  This is useful with input devices that emit relative motion (for example scrolling, key press events, pointer lock)\n\n* `t` is the time at which the move event occured\n* `...` are the components of the relative motion\n\n#### `vec.set(t, ...)`\nSets the state of the curve at time `t`\n\n* `t` is the time parameter to sample\n* `...` are the components of the state\n\n#### `vec.jump(t, ...)`\nSets the state of the vector at time `t` with no smoothing.\n\n* `t` is the time parameter to sample\n* `...` are the components of the vector\n\n#### `vec.idle(t)`\nAdds a stationary data point to the curve (ie notify the curve that no input state has changed)\n\n* `t` is the time at which the curve was idle\n\n#### `vec.flush(t)`\nRemoves all samples in the buffer before time `t`\n\n* `t` is the cutoff time\n\n#### `vec.lastT()`\n\n**Returns** The time of the last sample in the curve\n\n#### `vec.stable()`\n\n**Returns** `true` is the vector is stationary as of the last event.\n\n# License\n(c) 2015 Mikola Lysenko.  MIT License",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mikolalysenko/filtered-vector.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "version": "1.2.4"
}
