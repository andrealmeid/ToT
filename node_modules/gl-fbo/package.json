{
  "_args": [
    [
      {
        "raw": "gl-fbo@^2.0.3",
        "scope": null,
        "escapedName": "gl-fbo",
        "name": "gl-fbo",
        "rawSpec": "^2.0.3",
        "spec": ">=2.0.3 <3.0.0",
        "type": "range"
      },
      "/home/italove/Projects/ToT/node_modules/gl-select-static"
    ]
  ],
  "_from": "gl-fbo@>=2.0.3 <3.0.0",
  "_id": "gl-fbo@2.0.5",
  "_inCache": true,
  "_location": "/gl-fbo",
  "_nodeVersion": "0.12.2",
  "_npmUser": {
    "name": "mikolalysenko",
    "email": "mikolalysenko@gmail.com"
  },
  "_npmVersion": "2.7.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gl-fbo@^2.0.3",
    "scope": null,
    "escapedName": "gl-fbo",
    "name": "gl-fbo",
    "rawSpec": "^2.0.3",
    "spec": ">=2.0.3 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gl-plot3d",
    "/gl-select-static"
  ],
  "_resolved": "https://registry.npmjs.org/gl-fbo/-/gl-fbo-2.0.5.tgz",
  "_shasum": "0fa75a497cf787695530691c8f04abb6fb55fa22",
  "_shrinkwrap": null,
  "_spec": "gl-fbo@^2.0.3",
  "_where": "/home/italove/Projects/ToT/node_modules/gl-select-static",
  "authors": [
    "Mikola Lysenko <mikolalysenko@gmail.com> (http://0fps.net)",
    "Hugh Kennedy <hughskennedy@gmail.com> (http://hughsk.io)",
    "Chris Dickinson <chris@neversaw.us> (http://neversaw.us)"
  ],
  "bugs": {
    "url": "https://github.com/stackgl/gl-fbo/issues"
  },
  "dependencies": {
    "gl-texture2d": "^2.0.0"
  },
  "description": "Frame buffer object wrapper for WebGL",
  "devDependencies": {
    "a-big-triangle": "0.0.0",
    "gl-now": "^1.3.1",
    "glslify": "^1.4.0",
    "ndarray": "^1.0.15",
    "ndarray-fill": "^1.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "0fa75a497cf787695530691c8f04abb6fb55fa22",
    "tarball": "https://registry.npmjs.org/gl-fbo/-/gl-fbo-2.0.5.tgz"
  },
  "gitHead": "6173b4ee305e99f359a1a5939bba28169699d9ef",
  "homepage": "https://github.com/stackgl/gl-fbo#readme",
  "keywords": [
    "fbo",
    "frame",
    "buffer",
    "framebuffer",
    "object",
    "webgl",
    "gl",
    "offscreen",
    "render",
    "texture",
    "renderbuffer",
    "render"
  ],
  "license": "MIT",
  "main": "fbo.js",
  "maintainers": [
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    },
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    },
    {
      "name": "chrisdickinson",
      "email": "chris@neversaw.us"
    },
    {
      "name": "mattdesl",
      "email": "dave.des@gmail.com"
    },
    {
      "name": "substack",
      "email": "mail@substack.net"
    },
    {
      "name": "thibauts",
      "email": "thibaut.seguy@gmail.com"
    },
    {
      "name": "yoshuawuyts",
      "email": "i@yoshuawuyts.com"
    }
  ],
  "name": "gl-fbo",
  "optionalDependencies": {},
  "readme": "gl-fbo\n======\nWebGL framebuffer object wrapper\n\n## Example\n\n[Try this in your browser if you have WebGL](http://stackgl.github.io/gl-fbo/)\n\n```javascript\nvar shell = require(\"gl-now\")()\nvar createFBO = require(\"gl-fbo\")\nvar glslify = require(\"glslify\")\nvar ndarray = require(\"ndarray\")\nvar fill = require(\"ndarray-fill\")\nvar fillScreen = require(\"a-big-triangle\")\n\nvar createUpdateShader = glslify({\n  vertex: \"\\\n    attribute vec2 position;\\\n    varying vec2 uv;\\\n    void main() {\\\n      gl_Position = vec4(position,0.0,1.0);\\\n      uv = 0.5 * (position+1.0);\\\n    }\",\n  fragment: \"\\\n    precision mediump float;\\\n    uniform sampler2D buffer;\\\n    uniform vec2 dims;\\\n    varying vec2 uv;\\\n    void main() {\\\n      float n = 0.0;\\\n      for(int dx=-1; dx<=1; ++dx)\\\n      for(int dy=-1; dy<=1; ++dy) {\\\n        n += texture2D(buffer, uv+vec2(dx,dy)/dims).r;\\\n      }\\\n      float s = texture2D(buffer, uv).r;\\\n      if(n > 3.0+s || n < 3.0) {\\\n        gl_FragColor = vec4(0,0,0,1);\\\n      } else {\\\n        gl_FragColor = vec4(1,1,1,1);\\\n      }\\\n    }\",\n  inline: true\n})\n\nvar createDrawShader = glslify({\n  vertex: \"\\\n    attribute vec2 position;\\\n    varying vec2 uv;\\\n    void main() {\\\n      gl_Position = vec4(position,0.0,1.0);\\\n      uv = 0.5 * (position+1.0);\\\n    }\",\n  fragment: \"\\\n    precision mediump float;\\\n    uniform sampler2D buffer;\\\n    varying vec2 uv;\\\n    void main() {\\\n      gl_FragColor = texture2D(buffer, uv);\\\n    }\",\n  inline: true\n})\n\nvar state, updateShader, drawShader, current = 0\n\nshell.on(\"gl-init\", function() {\n  var gl = shell.gl\n  \n  //Turn off depth test\n  gl.disable(gl.DEPTH_TEST)\n\n  //Initialize shaders\n  updateShader = createUpdateShader(gl)\n  drawShader = createDrawShader(gl)\n\n  //Allocate buffers\n  state = [ createFBO(gl, [512, 512]), createFBO(gl, [512, 512]) ]\n  \n  //Initialize state buffer\n  var initial_conditions = ndarray(new Uint8Array(512*512*4), [512, 512, 4])\n  fill(initial_conditions, function(x,y,c) {\n    if(c === 3) {\n      return 255\n    }\n    return Math.random() > 0.9 ? 255 : 0\n  })\n  state[0].color[0].setPixels(initial_conditions)\n  \n  //Set up vertex pointers\n  drawShader.attributes.position.location = updateShader.attributes.position.location = 0\n})\n\nshell.on(\"tick\", function() {\n  var gl = shell.gl\n  var prevState = state[current]\n  var curState = state[current ^= 1]\n\n  //Switch to state fbo\n  curState.bind()\n  \n  //Run update shader\n  updateShader.bind()\n  updateShader.uniforms.buffer = prevState.color[0].bind()\n  updateShader.uniforms.dims = prevState.shape\n  fillScreen(gl)\n})\n\nshell.on(\"gl-render\", function(t) {\n  var gl = shell.gl\n  \n  //Render contents of buffer to screen\n  drawShader.bind()\n  drawShader.uniforms.buffer = state[current].color[0].bind()\n  fillScreen(gl)\n})\n```\n\nResult:\n\n<img src=\"https://raw.github.com/stackgl/gl-fbo/master/screenshot.png\">\n\n\n## Install\n\nInstall using npm:\n\n    npm install gl-fbo\n\n# API\n\n### `var createFBO = require(\"gl-fbo\")`\n\n## Constructor\nThere is currently only one default way to create a Framebuffer object.  You can construct a framebuffer using the following syntax:\n\n### `var fbo = createFBO(gl, shape[, options])`\nCreates a wrapped framebuffer object\n\n* `gl` is a handle to a WebGL context\n* `shape` is a length 2 array encoding the `[width, height]` of the frame buffer\n* `options` is an object containing the following optional properties:\n\n    + `options.preferFloat` Upgrade to floating point if available, otherwise fallback to 8bit. (default `false`)\n    + `options.float` Use floating point textures (default `false`)\n    + `options.color`  The number of color buffers to create (default `1`)\n    + `options.depth` If fbo has a depth buffer (default: `true`)\n    + `options.stencil` If fbo has a stencil buffer (default: `false`)\n\n## Methods\n\n### `fbo.bind()`\nBinds the framebuffer object to the display.  To rebind the original drawing buffer, you can just call WebGL directly:\n\n```javascript\n//Bind the drawing buffer\ngl.bindFramebuffer(gl.FRAMEBUFFER, null)\n```\n\n### `fbo.dispose()`\nDestroys the framebuffer object and releases all associated resources\n\n## Properties\n\n\n### `fbo.shape`\nReturns the shape of the frame buffer object.  Writing to this property resizes the framebuffer.  For example,\n\n```javascript\nfbo.shape = [ newWidth, newHeight ]\n```\n\n### `fbo.gl`\nA reference to the WebGL context\n\n### `fbo.handle`\nA handle to the underlying Framebuffer object.\n\n### `fbo.color`\nAn array containing [`gl-texture2d`](https://github.com/stackgl/gl-texture2d) objects representing the buffers.  \n\n### `fbo.depth`\nThe depth/stencil component of the FBO.  Stored as a [`gl-texture2d`](https://github.com/stackgl/gl-texture2d).  If not present, is `null`.\n\nCredits\n=======\n(c) 2013-2014 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stackgl/gl-fbo.git"
  },
  "scripts": {
    "start": "beefy --open example/example.js -- --transform glslify",
    "test": "tap test/*.js"
  },
  "version": "2.0.5"
}
