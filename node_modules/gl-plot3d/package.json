{
  "_args": [
    [
      {
        "raw": "gl-plot3d@^1.5.4",
        "scope": null,
        "escapedName": "gl-plot3d",
        "name": "gl-plot3d",
        "rawSpec": "^1.5.4",
        "spec": ">=1.5.4 <2.0.0",
        "type": "range"
      },
      "/home/italove/Projects/ToT/node_modules/plotly.js"
    ]
  ],
  "_from": "gl-plot3d@>=1.5.4 <2.0.0",
  "_id": "gl-plot3d@1.5.4",
  "_inCache": true,
  "_location": "/gl-plot3d",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/gl-plot3d-1.5.4.tgz_1491512616803_0.8033860917203128"
  },
  "_npmUser": {
    "name": "dfcreative",
    "email": "df.creative@gmail.com"
  },
  "_npmVersion": "3.7.2",
  "_phantomChildren": {
    "glsl-inject-defines": "1.0.3",
    "glsl-resolve": "0.0.1",
    "glsl-token-defines": "1.0.0",
    "glsl-token-depth": "1.1.2",
    "glsl-token-descope": "1.0.2",
    "glsl-token-scope": "1.1.2",
    "glsl-token-string": "1.0.1",
    "glsl-tokenizer": "2.1.2",
    "glslify-deps": "1.3.0",
    "minimist": "1.2.0",
    "readable-stream": "1.0.34",
    "resolve": "1.3.3",
    "static-module": "1.3.2",
    "through2": "0.6.5",
    "xtend": "4.0.1"
  },
  "_requested": {
    "raw": "gl-plot3d@^1.5.4",
    "scope": null,
    "escapedName": "gl-plot3d",
    "name": "gl-plot3d",
    "rawSpec": "^1.5.4",
    "spec": ">=1.5.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/plotly.js"
  ],
  "_resolved": "https://registry.npmjs.org/gl-plot3d/-/gl-plot3d-1.5.4.tgz",
  "_shasum": "be9c1868c829a47d0a2ab03c70d528af868f9e86",
  "_shrinkwrap": null,
  "_spec": "gl-plot3d@^1.5.4",
  "_where": "/home/italove/Projects/ToT/node_modules/plotly.js",
  "author": {
    "name": "Mikola Lysenko"
  },
  "browserify": {
    "transform": [
      "glslify"
    ]
  },
  "bugs": {
    "url": "https://github.com/gl-vis/gl-plot3d/issues"
  },
  "dependencies": {
    "3d-view-controls": "^2.2.0",
    "a-big-triangle": "^1.0.0",
    "gl-axes3d": "^1.2.5",
    "gl-fbo": "^2.0.3",
    "gl-mat4": "^1.1.2",
    "gl-select-static": "^2.0.2",
    "gl-shader": "^4.0.4",
    "gl-spikes3d": "^1.0.3",
    "glslify": "^2.1.2",
    "is-mobile": "^0.2.2",
    "mouse-change": "^1.1.1",
    "ndarray": "^1.0.16"
  },
  "description": "Quick start rendering engine for plotting/data visualization",
  "devDependencies": {
    "bunny": "^1.0.1",
    "dirichlet": "0.0.0",
    "enable-mobile": "^1.0.7",
    "gl-line3d": "^1.0.0",
    "gl-mesh3d": "^1.0.0",
    "gl-scatter3d": "^1.0.10",
    "gl-surface3d": "^1.0.0",
    "ndarray-fill": "^1.0.1",
    "simplicial-complex": "^1.0.0"
  },
  "directories": {
    "example": "example"
  },
  "dist": {
    "shasum": "be9c1868c829a47d0a2ab03c70d528af868f9e86",
    "tarball": "https://registry.npmjs.org/gl-plot3d/-/gl-plot3d-1.5.4.tgz"
  },
  "gitHead": "508ccc89b2648a19be87ecba74060c7f9d836281",
  "homepage": "https://github.com/gl-vis/gl-plot3d",
  "license": "MIT",
  "main": "scene.js",
  "maintainers": [
    {
      "name": "bpostlethwaite",
      "email": "post.ben.here@gmail.com"
    },
    {
      "name": "dfcreative",
      "email": "df.creative@gmail.com"
    },
    {
      "name": "etpinard",
      "email": "etienne.t.pinard@gmail.com"
    },
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    },
    {
      "name": "monfera",
      "email": "monfera.robert@gmail.com"
    },
    {
      "name": "rreusser",
      "email": "rsreusser@gmail.com"
    }
  ],
  "name": "gl-plot3d",
  "optionalDependencies": {},
  "readme": "gl-plot3d\r\n=========\r\nThis is the core module for 3D plotting in gl-vis. It is compatible with the following modules:\r\n\r\n* [gl-scatter3d](https://github.com/gl-vis/gl-scatter3d): 3D scatter plots\r\n* [gl-line3d](https://github.com/gl-vis/gl-line3d): 3D line plots\r\n* [gl-surface3d](https://github.com/gl-vis/gl-surface3d): 3D surface plots\r\n* [gl-mesh3d](https://github.com/gl-vis/gl-mesh3d): General mesh drawing\r\n\r\nThis module (and this whole subecosystem) skew more towards the easy-side of the simple vs. easy tradeoff spectrum.  It has lots of options, but has opinionated and reasonable defaults which should make it suitable for small projects like mesh viewers or knocking out one-off data visualizations.  If you want more precise, low level control, check out [stack.gl](https://stack.gl).\r\n\r\n# Examples\r\n\r\n### Scatter plot\r\n\r\n[<img src=\"images/scatter3d.png\" width=\"400px\" alt=\"3D scatter plot\">](http://requirebin.com/?gist=cf75d78184f6b8cac15a) [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=cf75d78184f6b8cac15a)\r\n\r\n```javascript\r\nvar createScene   = require('gl-plot3d')\r\nvar createScatter = require('gl-scatter3d')\r\nvar bunny         = require('bunny')\r\n\r\nvar scene = createScene()\r\n\r\nvar scatter = createScatter({\r\n  gl:             scene.gl,\r\n  position:       bunny.positions,\r\n  size:           10,\r\n  glyph:          'â˜…',\r\n  orthographic:   true,\r\n  lineColor:      [0,0,0],\r\n  color:          [1,0,0],\r\n  lineWidth:      1,\r\n  projectOpacity: 0.3\r\n})\r\n\r\nscene.add(scatter)\r\n```\r\n\r\n### Line plot\r\n\r\n[<img src=\"images/line3d.png\" width=\"400px\" alt=\"3D line plot\">](http://requirebin.com/?gist=16dee68aba0f2aee6068) [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=16dee68aba0f2aee6068)\r\n\r\n```javascript\r\nvar createScene = require('gl-plot3d')\r\nvar createLine  = require('gl-line3d')\r\n\r\nvar scene = createScene()\r\n\r\nvar points = []\r\nfor(var t = 0; t< 1000; ++t) {\r\n  var theta = Math.PI * t / 200.0\r\n  points.push([Math.cos(theta), 0.002 * t, Math.sin(theta)])\r\n}\r\n\r\nvar linePlot = createLine({\r\n  gl:        scene.gl,\r\n  position:  points,\r\n  lineWidth: 5,\r\n  color:     [1,0,0]\r\n})\r\n\r\nscene.add(linePlot)\r\n```\r\n\r\n### Surfaces\r\n\r\n[<img src=\"images/surface3d.png\" width=\"400px\" alt=\"3D surface plot\">](http://requirebin.com/?gist=1191b34203ffd9adc905)\r\n[![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=1191b34203ffd9adc905)\r\n\r\n```javascript\r\nvar createScene       = require('gl-plot3d')\r\nvar createSurfacePlot = require('gl-surface3d')\r\nvar ndarray           = require('ndarray')\r\nvar fill              = require('ndarray-fill')\r\nvar diric             = require('dirichlet')\r\n\r\nvar scene = createScene()\r\n\r\nvar field = ndarray(new Float32Array(512*512), [512,512])\r\nfill(field, function(x,y) {\r\n  return 128 * diric(10, 10.0*(x-256)/512) * diric(10, 10.0*(y-256)/512)\r\n})\r\n\r\nvar surface = createSurfacePlot({\r\n  gl:             scene.gl,\r\n  field:          field,\r\n  contourProject: true\r\n})\r\n\r\nscene.add(surface)\r\n```\r\n\r\n### Parametric surfaces\r\n\r\n[<img src=\"images/torus3d.png\" width=\"400px\" alt=\"3D parametric surface plot\">](http://requirebin.com/?gist=5feeac1f3767298d55ca) [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=5feeac1f3767298d55ca)\r\n\r\n```javascript\r\nvar createScene   = require('gl-plot3d')\r\nvar createSurface = require('gl-surface3d')\r\nvar ndarray       = require('ndarray')\r\n\r\nvar scene = createScene()\r\n\r\nvar size = 64\r\nvar coords = [\r\n  ndarray(new Float32Array(4*(size+1)*(size+1)), [2*size+1,2*size+1]),\r\n  ndarray(new Float32Array(4*(size+1)*(size+1)), [2*size+1,2*size+1]),\r\n  ndarray(new Float32Array(4*(size+1)*(size+1)), [2*size+1,2*size+1])\r\n]\r\nfor(var i=0; i<=2*size; ++i) {\r\n  var theta = Math.PI * (i - size) / size\r\n  for(var j=0; j<=2*size; ++j) {\r\n    var phi = Math.PI * (j - size) / size\r\n    coords[0].set(i, j, (50.0 + 20.0 * Math.cos(theta)) * Math.cos(phi))\r\n    coords[1].set(i, j, (50.0 + 20.0 * Math.cos(theta)) * Math.sin(phi))\r\n    coords[2].set(i, j, 20.0 * Math.sin(theta))\r\n  }\r\n}\r\n\r\nvar surface = createSurface({\r\n  gl:             scene.gl,\r\n  coords:         coords,\r\n  contourProject: true,\r\n  showContour:    true\r\n})\r\n\r\nscene.add(surface)\r\n```\r\n\r\n### Meshes\r\n\r\n[<img src=\"images/mesh3d.png\" width=\"400px\" alt=\"3D mesh\">](http://requirebin.com/?gist=0d4c38d1aa80edbe4a28) [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=0d4c38d1aa80edbe4a28)\r\n\r\n```javascript\r\nvar createScene = require('gl-plot3d')\r\nvar createMesh  = require('gl-mesh3d')\r\nvar bunny       = require('bunny')\r\n\r\nvar scene = createScene()\r\n\r\nvar mesh = createMesh({\r\n  gl:         scene.gl,\r\n  cells:      bunny.cells,\r\n  positions:  bunny.positions,\r\n  colormap:   'jet'\r\n})\r\n\r\nscene.add(mesh)\r\n```\r\n\r\n### Wireframe meshes\r\n\r\n[<img src=\"images/wire3d.png\" width=\"400px\" alt=\"3D wire frame\">](http://requirebin.com/?gist=37a8df8ace4ecafa010f) [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=37a8df8ace4ecafa010f)\r\n\r\n```javascript\r\nvar createScene = require('gl-plot3d')\r\nvar createMesh  = require('gl-mesh3d')\r\nvar bunny       = require('bunny')\r\nvar sc          = require('simplicial-complex')\r\n\r\nvar scene = createScene()\r\n\r\nvar mesh = createMesh({\r\n  gl:         scene.gl,\r\n  cells:      sc.skeleton(bunny.cells, 1),\r\n  positions:  bunny.positions,\r\n  colormap:   'jet'\r\n})\r\n\r\nscene.add(mesh)\r\n```\r\n\r\n# Install\r\n\r\n```\r\nnpm i gl-plot3d\r\n```\r\n\r\n# API\r\n\r\n## Constructor\r\n\r\n#### `var scene = require('gl-plot3d')(canvas[, options])`\r\n\r\nCreates a new scene object.\r\n\r\n* `canvas` is an HTML canvas element into which the scene is inserted. (If not specified, a new fullscreen canvas is created and appended to the document)\r\n* `gl` is a WebGL context (If not specified, a new context is created)\r\n* `glOptions` is a set of options passed to the new WebGL context, `gl` is not specified\r\n* `camera` an object storing camera options.  See [orbiter](https://github.com/mikolalysenko/orbiter) for more details\r\n* `axes` options passed to the axes object.  See [gl-axes](https://github.com/mikolalysenko/gl-axes) for more details\r\n* `spikes` options passed to the axes spikes.  See [gl-spikes](https://github.com/mikolalysenko/gl-spikes) for more details\r\n* `clearColor` a length 4 array of color values for the clear\r\n* `fovy` the vertical field of view\r\n* `zNear` near clip plane distance\r\n* `zFar` far clip plane distance\r\n* `pickRadius` the distance for mouse picking\r\n* `autoBounds` a flag, if set automatically recalculates object bounds (default `true`)\r\n* `autoScale` a flag, if set automatically scales the data set to unit length, preserving aspect ratio (default `true`)\r\n* `autoCenter` a flag, if set translates data to the center of the coordinate system (default `true`)\r\n* `clipToBounds` clip data points to remain within the axes bounds\r\n* `snapToData` snap selections to data points\r\n* `onselect` called whenever the currently highlighted data point changes\r\n* `onrender` called whenever the scene is drawn\r\n\r\n## Methods\r\n\r\n#### `scene.addObject(obj)`\r\nAdds a new object to the scene\r\n\r\n#### `scene.removeObject(obj)`\r\nRemoves an object from the scene\r\n\r\n#### `scene.redraw()`\r\nForces an immediate redraw of the scene and pick buffer.  Useful if you are s\r\n\r\n#### `scene.dispose()`\r\nDestroys the scene and releases all associated resources.  Also destroys all attached objects.\r\n\r\n## Properties\r\n\r\n#### `scene.selection`\r\nInformation about the currently selected object in the scene.\r\n\r\n#### `scene.objects`\r\nA list of all objects in the scene.\r\n\r\n#### `scene.canvas`\r\nThe canvas element associated with the scene\r\n\r\n#### `scene.gl`\r\nThe WebGL context associated with the scene.\r\n\r\n#### `scene.axes`\r\nA reference to the axes object for the scene\r\n\r\n#### `scene.camera`\r\nA reference to the camera object for the scene\r\n\r\n#### `scene.bounds`\r\nBounds for the scene\r\n\r\n# License\r\n(c) 2015 Mikola Lysenko. MIT License\r\n\r\nDevelopment support by [plot.ly](http://plot.ly)\r\n\r\n[<img src=\"images/plotly.png\" width=\"250px\">](http://plot.ly)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gl-vis/gl-plot3d.git"
  },
  "scripts": {
    "line": "beefy ./example/line.js --open",
    "mesh": "beefy ./example/mesh.js --open",
    "scatter": "beefy ./example/scatter.js --open",
    "surface": "beefy ./example/surface.js --open",
    "wireframe": "beefy ./example/wireframe.js --open"
  },
  "version": "1.5.4"
}
