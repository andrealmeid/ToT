{
  "_args": [
    [
      {
        "raw": "gl-quat@^1.0.0",
        "scope": null,
        "escapedName": "gl-quat",
        "name": "gl-quat",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/italove/Projects/ToT/node_modules/quat-slerp"
    ]
  ],
  "_from": "gl-quat@>=1.0.0 <2.0.0",
  "_id": "gl-quat@1.0.0",
  "_inCache": true,
  "_location": "/gl-quat",
  "_nodeVersion": "0.10.32",
  "_npmUser": {
    "name": "mattdesl",
    "email": "dave.des@gmail.com"
  },
  "_npmVersion": "2.1.18",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gl-quat@^1.0.0",
    "scope": null,
    "escapedName": "gl-quat",
    "name": "gl-quat",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/quat-slerp"
  ],
  "_resolved": "https://registry.npmjs.org/gl-quat/-/gl-quat-1.0.0.tgz",
  "_shasum": "0945ec923386f45329be5dc357b1c8c2d47586c5",
  "_shrinkwrap": null,
  "_spec": "gl-quat@^1.0.0",
  "_where": "/home/italove/Projects/ToT/node_modules/quat-slerp",
  "bugs": {
    "url": "https://github.com/stackgl/gl-quat/issues"
  },
  "contributors": [
    {
      "name": "Brandon Jones",
      "email": "tojiro@gmail.com"
    },
    {
      "name": "Colin MacKenzie IV",
      "email": "sinisterchipmunk@gmail.com"
    }
  ],
  "dependencies": {
    "gl-mat3": "^1.0.0",
    "gl-vec3": "^1.0.3",
    "gl-vec4": "^1.0.0"
  },
  "description": "gl-matrix's quaternion, split into smaller pieces",
  "devDependencies": {
    "dox": "git://github.com/hughsk/dox.git#api-context"
  },
  "directories": {},
  "dist": {
    "shasum": "0945ec923386f45329be5dc357b1c8c2d47586c5",
    "tarball": "https://registry.npmjs.org/gl-quat/-/gl-quat-1.0.0.tgz"
  },
  "gitHead": "6d3b1574dd51b78a24dd504f2ab920d3945b0b4b",
  "homepage": "https://github.com/stackgl/gl-quat",
  "keywords": [
    "ecosystem:stackgl",
    "gl-matrix",
    "matrix",
    "math",
    "gl",
    "mat4",
    "mat4x4",
    "4x4",
    "quat",
    "quaternion",
    "slerp",
    "spherical interpolation",
    "mat",
    "vector",
    "maths"
  ],
  "license": {
    "type": "Zlib",
    "url": "http://github.com/stackgl/gl-quat/blob/master/LICENSE.md"
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "mattdesl",
      "email": "dave.des@gmail.com"
    }
  ],
  "name": "gl-quat",
  "optionalDependencies": {},
  "readme": "# gl-quat\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nPart of a fork of [@toji](http://github.com/toji)'s\n[gl-matrix](http://github.com/toji/gl-matrix) split into smaller pieces: this\npackage contains `glMatrix.quat`.\n\n## Usage\n\n[![NPM](https://nodei.co/npm/gl-quat.png)](https://nodei.co/npm/gl-quat/)\n\n### `quat = require('gl-quat')`\n\nWill load all of the module's functionality and expose it on a single\nobject. Note that any of the methods may also be required directly\nfrom their files.\n\nFor example, the following are equivalent:\n\n``` javascript\nvar slerp = require('gl-quat').slerp\nvar slerp = require('gl-quat/slerp')\n```\n\n## API\n\n  - [add()](#addoutquat-aquat-bquat)\n  - [calculateW()](#calculatewoutquat-aquat)\n  - [copy()](#copyoutquat-aquat)\n  - [conjugate()](#conjugateoutquat-aquat)\n  - [copy()](#copyoutquat-aquat)\n  - [create()](#create)\n  - [dot()](#dotaquat-bquat)\n  - [fromMat3()](#frommat3outquat-mmat3)\n  - [fromValues()](#fromvaluesxnumber-ynumber-znumber-wnumber)\n  - [identity()](#identityoutquat)\n  - [invert()](#invertoutquat-aquat)\n  - [length()](#lengthaquat)\n  - [lerp()](#lerpoutquat-aquat-bquat-tnumber)\n  - [multiply()](#multiplyoutquat-aquat-bquat)\n  - [normalize()](#normalizeoutquat-aquat)\n  - [rotateX()](#rotatexoutquat-aquat-radnumber)\n  - [rotateY()](#rotateyoutquat-aquat-radnumber)\n  - [rotateZ()](#rotatezoutquat-aquat-radnumber)\n  - [rotationTo()](#rotationtooutquat-avec3-bvec3)\n  - [scale()](#scaleoutquat-aquat-bnumber)\n  - [set()](#setoutquat-xnumber-ynumber-znumber-wnumber)\n  - [setAxes()](#setaxesviewvec3-rightvec3-upvec3)\n  - [setAxisAngle()](#setaxisangleoutquat-axisvec3-radnumber)\n  - [slerp()](#slerpoutquat-aquat-bquat-tnumber)\n  - [sqlerp()](#sqlerpoutquat-aquat-bquat-cquat-dquat-tnumber)\n  - [squaredLength()](#squaredlengthaquat)\n\n## calculateW(out:quat, a:quat)\n\n  Calculates the W component of a quat from the X, Y, and Z components.\n  Assumes that quaternion is 1 unit in length.\n  Any existing W component will be ignored.\n\n## add(out:quat, a:quat, b:quat)\n\n  Adds two quat's\n\n## conjugate(out:quat, a:quat)\n\n  Calculates the conjugate of a quat\n  If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n\n## copy(out:quat, a:quat)\n\n  Copy the values from one quat to another\n\n## create()\n\n  Creates a new identity quat\n\n## dot(a:quat, b:quat)\n\n  Calculates the dot product of two quat's\n\n## fromMat3(out:quat, m:mat3)\n\n  Creates a quaternion from the given 3x3 rotation matrix.\n  \n  NOTE: The resultant quaternion is not normalized, so you should be sure\n  to renormalize the quaternion yourself where necessary.\n\n## fromValues(x:Number, y:Number, z:Number, w:Number)\n\n\n## identity(out:quat)\n\n  Set a quat to the identity quaternion\n\n## invert(out:quat, a:quat)\n\n  Calculates the inverse of a quat\n\n## length(a:quat)\n\n  Calculates the length of a quat\n\n## lerp(out:quat, a:quat, b:quat, t:Number)\n\n  Performs a linear interpolation between two quat's\n\n## multiply(out:quat, a:quat, b:quat)\n\n  Multiplies two quat's\n\n## normalize(out:quat, a:quat)\n\n  Normalize a quat\n\n## rotateX(out:quat, a:quat, rad:number)\n\n  Rotates a quaternion by the given angle about the X axis\n\n## rotateY(out:quat, a:quat, rad:number)\n\n  Rotates a quaternion by the given angle about the Y axis\n\n## rotateZ(out:quat, a:quat, rad:number)\n\n  Rotates a quaternion by the given angle about the Z axis\n\n## rotationTo(out:quat, a:vec3, b:vec3)\n\n  Sets a quaternion to represent the shortest rotation from one\n  vector to another.\n  \n  Both vectors are assumed to be unit length.\n\n## scale(out:quat, a:quat, b:Number)\n\n  Scales a quat by a scalar number\n\n## set(out:quat, x:Number, y:Number, z:Number, w:Number)\n\n  Set the components of a quat to the given values\n\n## setAxes(view:vec3, right:vec3, up:vec3)\n\n  Sets the specified quaternion with values corresponding to the given\n  axes. Each axis is a vec3 and is expected to be unit length and\n  perpendicular to all other specified axes.\n\n## setAxisAngle(out:quat, axis:vec3, rad:Number)\n\n  Sets a quat from the given angle and rotation axis,\n  then returns it.\n\n## slerp(out:quat, a:quat, b:quat, t:Number)\n\n  Performs a spherical linear interpolation between two quat\n\n## sqlerp(out:quat, a:quat, b:quat, c:quat, d:quat, t:Number)\n\n  Performs a spherical linear interpolation with two control points\n\n## squaredLength(a:quat)\n\n  Calculates the squared length of a quat\n\n## License\n\nMIT. See [LICENSE.md](http://github.com/stackgl/gl-quat/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stackgl/gl-quat.git"
  },
  "scripts": {
    "get-docs": "cat *.js | dox --api"
  },
  "version": "1.0.0"
}
