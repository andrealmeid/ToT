{
  "_args": [
    [
      {
        "raw": "gl-surface3d@^1.3.0",
        "scope": null,
        "escapedName": "gl-surface3d",
        "name": "gl-surface3d",
        "rawSpec": "^1.3.0",
        "spec": ">=1.3.0 <2.0.0",
        "type": "range"
      },
      "/home/italove/Projects/ToT/node_modules/plotly.js"
    ]
  ],
  "_from": "gl-surface3d@>=1.3.0 <2.0.0",
  "_id": "gl-surface3d@1.3.0",
  "_inCache": true,
  "_location": "/gl-surface3d",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/gl-surface3d-1.3.0.tgz_1474067726714_0.18116486258804798"
  },
  "_npmUser": {
    "name": "dfcreative",
    "email": "df.creative@gmail.com"
  },
  "_npmVersion": "3.7.2",
  "_phantomChildren": {
    "glsl-inject-defines": "1.0.3",
    "glsl-resolve": "0.0.1",
    "glsl-token-defines": "1.0.0",
    "glsl-token-depth": "1.1.2",
    "glsl-token-descope": "1.0.2",
    "glsl-token-scope": "1.1.2",
    "glsl-token-string": "1.0.1",
    "glsl-tokenizer": "2.1.2",
    "glslify-deps": "1.3.0",
    "minimist": "1.2.0",
    "readable-stream": "1.0.34",
    "resolve": "1.3.3",
    "static-module": "1.3.2",
    "through2": "0.6.5",
    "xtend": "4.0.1"
  },
  "_requested": {
    "raw": "gl-surface3d@^1.3.0",
    "scope": null,
    "escapedName": "gl-surface3d",
    "name": "gl-surface3d",
    "rawSpec": "^1.3.0",
    "spec": ">=1.3.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/plotly.js"
  ],
  "_resolved": "https://registry.npmjs.org/gl-surface3d/-/gl-surface3d-1.3.0.tgz",
  "_shasum": "5232e0fc7e1fcbb943525b27d76781ccee826403",
  "_shrinkwrap": null,
  "_spec": "gl-surface3d@^1.3.0",
  "_where": "/home/italove/Projects/ToT/node_modules/plotly.js",
  "author": {
    "name": "Mikola Lysenko"
  },
  "browserify": {
    "transform": [
      "glslify"
    ]
  },
  "bugs": {
    "url": "https://github.com/gl-vis/gl-surface3d/issues"
  },
  "dependencies": {
    "binary-search-bounds": "^1.0.0",
    "bit-twiddle": "^1.0.2",
    "colormap": "^2.1.0",
    "dup": "^1.0.0",
    "gl-buffer": "^2.0.3",
    "gl-mat4": "^1.0.0",
    "gl-shader": "^4.2.0",
    "gl-texture2d": "^2.0.0",
    "gl-vao": "^1.1.1",
    "glsl-specular-beckmann": "^1.1.2",
    "glslify": "^2.1.2",
    "ndarray": "^1.0.16",
    "ndarray-gradient": "^1.0.0",
    "ndarray-ops": "^1.2.1",
    "ndarray-pack": "^1.0.1",
    "ndarray-scratch": "^1.1.1",
    "surface-nets": "^1.0.2",
    "typedarray-pool": "^1.0.0"
  },
  "description": "Renders parametric surfaces in 3D",
  "devDependencies": {
    "dirichlet": "^1.0.1",
    "game-shell-orbit-camera": "^1.0.0",
    "gl-axes3d": "^1.2.4",
    "gl-matrix": "^2.3.2",
    "gl-now": "^1.4.0",
    "gl-select-static": "^2.0.2",
    "gl-spikes3d": "^1.0.5",
    "ndarray-fill": "^1.0.1"
  },
  "directories": {
    "example": "example"
  },
  "dist": {
    "shasum": "5232e0fc7e1fcbb943525b27d76781ccee826403",
    "tarball": "https://registry.npmjs.org/gl-surface3d/-/gl-surface3d-1.3.0.tgz"
  },
  "gitHead": "237102c47a4e62574c10af627dbf989b25f66dc4",
  "homepage": "https://github.com/gl-vis/gl-surface3d",
  "keywords": [
    "plot",
    "surface",
    "webgl",
    "visualization",
    "surf",
    "height",
    "field"
  ],
  "license": "MIT",
  "main": "surface.js",
  "maintainers": [
    {
      "name": "bpostlethwaite",
      "email": "post.ben.here@gmail.com"
    },
    {
      "name": "dfcreative",
      "email": "df.creative@gmail.com"
    },
    {
      "name": "etpinard",
      "email": "etienne.t.pinard@gmail.com"
    },
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    },
    {
      "name": "monfera",
      "email": "monfera.robert@gmail.com"
    },
    {
      "name": "rreusser",
      "email": "rsreusser@gmail.com"
    }
  ],
  "name": "gl-surface3d",
  "optionalDependencies": {},
  "readme": "gl-surface3d\r\n===============\r\n3D parametric surface plotting, compatible with [gl-vis](http://github.com/gl-vis).\r\n\r\n# Example\r\n\r\n```javascript\r\nvar createScene       = require('gl-plot3d')\r\nvar createSurfacePlot = require('gl-surface3d')\r\nvar ndarray           = require('ndarray')\r\nvar fill              = require('ndarray-fill')\r\nvar diric             = require('dirichlet')\r\n\r\nvar scene = createScene()\r\n\r\n//Create field\r\nvar field = ndarray(new Float32Array(512*512), [512,512])\r\nfill(field, function(x,y) {\r\n  return 128 * diric(10, 10.0*(x-256)/512) * diric(10, 10.0*(y-256)/512)\r\n})\r\n\r\n//Create surface plot\r\nvar surface = createSurfacePlot({\r\n  gl:    scene.gl,\r\n  field: field\r\n})\r\n\r\nscene.add(surface)\r\n```\r\n\r\nHere is what this should look like:\r\n\r\n<img src=\"plot.png\">\r\n\r\n[Test it in your browser (requires WebGL)](http://gl-vis.github.io/gl-surface3d/)\r\n\r\n# Install\r\n\r\n```\r\nnpm install gl-surface3d\r\n```\r\n\r\n# Basic Interface\r\n\r\n## Constructor\r\n\r\n#### `var surface = require('gl-surface3d')(params)`\r\nCreates a surface plot object.  `params` is an object with any of the following parameters\r\n\r\n* `gl` is a WebGL context\r\n* `field` a new 2D field encoded as an ndarray\r\n* `coords` is an array of 3 2D fields, each encoded as ndarrays (for parameteric surfaces)\r\n* `intensity` a 2D intensity field (defaults to `field` or `coords[2] is not present)\r\n* `colormap` the name of the new color map for the surface (see list of names in `colormap` [docs](https://github.com/bpostlethwaite/colormap))\r\n* `intensityBounds` sets the intensity range for the colormap\r\n* `ticks` is a pair of arrays of ticks representing the spacing of the points for the axes of the surface\r\n* `showSurface` if set, draw the surface\r\n* `showContour` if set, draw contour lines\r\n* `contourWidth` the width fo the contour lines\r\n* `contourTint` the amount of tint of the contour lines\r\n* `contourColor` the color of the contour line tint\r\n* `levels` an array of arrays representing the level of the isolines.\r\n* `dynamicWidth` the width of the dynamic isolines\r\n* `dynamicColors` the color of the dynamic isolines\r\n* `dynamicTint` the tint of the dynamic isolines\r\n* `vertexColor` interpolate color in fragment or vertex shader, useful for discontinuous functions ([ref](https://github.com/plotly/plotly.js/issues/940))\r\n\r\n\r\n## Methods\r\n\r\n#### `surface.update(params)`\r\nModify the surface.  `params` is an object with the same properties as the constructor\r\n\r\n\r\n# License\r\n(c) 2014-2015 Mikola Lysenko. MIT License.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gl-vis/gl-surface3d.git"
  },
  "scripts": {
    "start": "beefy --open --live example/example.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.3.0"
}
