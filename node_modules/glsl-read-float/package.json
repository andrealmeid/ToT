{
  "_args": [
    [
      {
        "raw": "glsl-read-float@^1.0.0",
        "scope": null,
        "escapedName": "glsl-read-float",
        "name": "glsl-read-float",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/italove/Projects/ToT/node_modules/gl-line3d"
    ]
  ],
  "_from": "glsl-read-float@>=1.0.0 <2.0.0",
  "_id": "glsl-read-float@1.1.0",
  "_inCache": true,
  "_location": "/glsl-read-float",
  "_npmUser": {
    "name": "mikolalysenko",
    "email": "mikolalysenko@gmail.com"
  },
  "_npmVersion": "1.4.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "glsl-read-float@^1.0.0",
    "scope": null,
    "escapedName": "glsl-read-float",
    "name": "glsl-read-float",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gl-line3d"
  ],
  "_resolved": "https://registry.npmjs.org/glsl-read-float/-/glsl-read-float-1.1.0.tgz",
  "_shasum": "dfb088b0162dcfcc56fc4eddd2f86e18cac32f26",
  "_shrinkwrap": null,
  "_spec": "glsl-read-float@^1.0.0",
  "_where": "/home/italove/Projects/ToT/node_modules/gl-line3d",
  "authors": [
    "ultraist",
    "Mikola Lysenko"
  ],
  "bugs": {
    "url": "https://github.com/mikolalysenko/glsl-read-float/issues"
  },
  "dependencies": {},
  "description": "Read floating point values back from WebGL",
  "devDependencies": {
    "a-big-triangle": "0.0.0",
    "canvas-fit": "0.0.0",
    "gl-context": "^0.1.0",
    "glslify": "^1.5.0"
  },
  "directories": {
    "example": "example"
  },
  "dist": {
    "shasum": "dfb088b0162dcfcc56fc4eddd2f86e18cac32f26",
    "tarball": "https://registry.npmjs.org/glsl-read-float/-/glsl-read-float-1.1.0.tgz"
  },
  "homepage": "https://github.com/mikolalysenko/glsl-read-float",
  "keywords": [
    "glsl",
    "read",
    "float",
    "gpu",
    "gl",
    "webgl",
    "gpgpu",
    "glslify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    }
  ],
  "name": "glsl-read-float",
  "optionalDependencies": {},
  "readme": "glsl-read-float\n===============\nWorkaround for reading floating point values back from the GPU using GLSL.\n\n## Example\n\n```javascript\nvar triangle     = require('a-big-triangle')\nvar fit          = require('canvas-fit')\nvar getContext   = require('gl-context')\nvar glslify      = require('glslify')\nvar unpackFloat  = require(\"glsl-read-float\")\n\nvar canvas     = document.body.appendChild(document.createElement('canvas'))\nvar gl         = getContext(canvas, render)\n\nwindow.addEventListener('resize', fit(canvas), false)\n\nvar shader = glslify({\n  vert: \"\\\nattribute vec2 position;\\\nvoid main() {\\\n  gl_Position = vec4(position, 0, 1);\\\n}\",\n  frag: \"\\\n#pragma glslify: packFloat = require(glsl-read-float)\\n\\\nuniform highp float f;\\\nvoid main() {\\\n  gl_FragColor = packFloat(f);\\\n}\",\n  inline: true\n})(gl)\n\nfunction render() {\n  var num = Math.random()\n\n  //Draw shader\n  shader.bind()\n  shader.uniforms.f = num\n  triangle(gl)\n\n  //Read back the float\n  var buffer = new Uint8Array(4)\n  gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, buffer)\n  var unpacked = unpackFloat(buffer[0], buffer[1], buffer[2], buffer[3])\n\n  //Log output to console\n  console.log(\"expected:\", num, \"got:\", unpacked)\n}\n```\n\n## Install\n\n```\nnpm install glsl-read-float\n```\n\n## API\n\n### GLSL\n\n```glsl\n#pragma glslify: packFloat = require(glsl-read-float)\n```\n\n#### `vec4 packed = packFloat(float f)`\nPacks a floating point number into an 8bit RGBA color vector, which can be written to the display using `gl_FragColor`, for example.\n\n* `f` is a `float` number\n\n**Returns** A packed `vec4` encoding the value of `f`\n\n### JavaScript\n\n```javascript\nvar unpackFloat = require(\"glsl-read-float\")\n```\n\n#### `var f = unpackFloat(x, y, z, w)`\nUnpacks a packed `vec4` into a single floating point value.\n\n* `x` is the first component of the packed float\n* `y` is the second component of the packed float\n* `z` is the third component of the packed float\n* `w` is the fourth component of the packed float\n\n**Returns** A number which is the unpacked value of the floating point input.\n\n**Note** This module doesn't handle denormals or floats larger than `Math.pow(2, 127)`\n\n## Credits\n\nOriginally based on a routine by @ultraist. You can find his blog here: http://ultraist.hatenablog.com/\n\nNewer version rewritten by Mikola Lysenko.  MIT License (c) 2014",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/glsl-read-float.git"
  },
  "scripts": {
    "test": "beefy --open example/example.js -- --transform glslify"
  },
  "version": "1.1.0"
}
