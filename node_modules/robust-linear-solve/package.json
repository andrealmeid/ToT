{
  "_args": [
    [
      {
        "raw": "robust-linear-solve@^1.0.0",
        "scope": null,
        "escapedName": "robust-linear-solve",
        "name": "robust-linear-solve",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/italove/Projects/ToT/node_modules/circumcenter"
    ]
  ],
  "_from": "robust-linear-solve@>=1.0.0 <2.0.0",
  "_id": "robust-linear-solve@1.0.0",
  "_inCache": true,
  "_location": "/robust-linear-solve",
  "_npmUser": {
    "name": "mikolalysenko",
    "email": "mikolalysenko@gmail.com"
  },
  "_npmVersion": "1.4.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "robust-linear-solve@^1.0.0",
    "scope": null,
    "escapedName": "robust-linear-solve",
    "name": "robust-linear-solve",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/barycentric",
    "/circumcenter"
  ],
  "_resolved": "https://registry.npmjs.org/robust-linear-solve/-/robust-linear-solve-1.0.0.tgz",
  "_shasum": "0cd6ac5040691a6f2aa3cd6311d728905ca3a1f1",
  "_shrinkwrap": null,
  "_spec": "robust-linear-solve@^1.0.0",
  "_where": "/home/italove/Projects/ToT/node_modules/circumcenter",
  "author": {
    "name": "Mikola Lysenko"
  },
  "bugs": {
    "url": "https://github.com/mikolalysenko/robust-linear-solve/issues"
  },
  "dependencies": {
    "robust-determinant": "^1.1.0"
  },
  "description": "Exactly solve a low dimensional linear system",
  "devDependencies": {
    "robust-compare": "^1.0.0",
    "robust-compress": "^1.0.0",
    "robust-scale": "^1.0.2",
    "robust-sum": "^1.0.0",
    "tape": "^2.12.3",
    "validate-robust-sequence": "^1.0.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "0cd6ac5040691a6f2aa3cd6311d728905ca3a1f1",
    "tarball": "https://registry.npmjs.org/robust-linear-solve/-/robust-linear-solve-1.0.0.tgz"
  },
  "homepage": "https://github.com/mikolalysenko/robust-linear-solve",
  "keywords": [
    "linear",
    "solve",
    "robust",
    "exact",
    "arithmetic"
  ],
  "license": "MIT",
  "main": "linsolve.js",
  "maintainers": [
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    }
  ],
  "name": "robust-linear-solve",
  "optionalDependencies": {},
  "readme": "robust-linear-solve\n===================\nAn exact linear solver for low dimensional systems.\n\n# Example\n\n```javascript\nvar linSolve = require(\"robust-linear-solve\")\n\nvar A = [ [1, 2, 3],\n          [3, 2, 1],\n          [0, 0, 1] ]\n\nvar b = [1, 2, 3]\n\nconsole.log(linSolve(A, b))\n```\n\nOutput:\n\n```javascript\n[ [ -14 ], [ 23 ], [ -12 ], [ -4 ] ]\n```\n\n# Install\n\n```\nnpm install robust-linear-solve\n```\n\n# API\n\n#### `require(\"robust-linear-solve\")(A, b)`\nFinds the exact solution to a linear system, `Ax = b`, using Cramer's rule.\n\n* `A` is a `n`-by-`n` square matrix, encoded as an array of arrays\n* `b` is an `n` dimensional vector encoded as a length `n` array\n\n**Returns** A projective `n+1` dimensional vector of non-overlapping increasing sequences representing the exact solution to the system.  That is to say, if `x` is the returned solution then in psuedocode we have the following constraint:\n\n`A [ x[0], x[1], ... ,  x[n-1] ] =  b * x[n]`\n\nOr in other words, the solution is given by the quotient:\n\n`[ x[0] / x[n], x[1] / x[n], .... , x[n-1] / x[n] ]`\n\nIf the system is not solvable, then the last coefficient, `x[n]` will be `0`.\n\n**Note** For up to `n=5`, you can avoid the extra method look up by calling `linSolve[n]` directly.\n\n# Credits\n(c) 2014 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/robust-linear-solve.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "version": "1.0.0"
}
